
import os
import pandas as pd
import re

def extract_bias(string):

    string = string.replace('_67G.S2P', '')
    vg = float(re.search(r'vg_(\d+\.\d+|\d+)', string).group(1))
    vd = float(re.search(r'vd_(\d+\.\d+|\d+)', string).group(1))
    vg_str = "{:.2f}".format(vg)
    vd_str = "{:.2f}".format(vd)
    # print(f"vg: {vg}")
    # print(f"vd: {vd}")
    print(f"vg: {vg_str}")
    print(f"vd: {vd_str}")
    return vg_str, vd_str


def save_s2p(data, filename):
    with open(filename, 'w') as f_w:
        # 因为ICCAP导出后的数据是Real imag形式，所以在s2p文件开头要申明好
        f_w.write("# Hz S RI R 50\n")
        for line in data:
            f_w.write(line)


def mdf_to_s2p(filein):

    with open(filein, 'r', encoding='utf-8') as f_r:
        file_content = f_r.readlines()

    flag = False
    new_lines = []
    for line in file_content:

        if "VAR vd =" in line:
            vd = line.replace('\n', '').split('=')[-1].replace(" ", '')
        if "VAR vg =" in line:
            vg = line.replace('\n', '').split('=')[-1].replace(" ", '')
        if "! freq reS11 imS11 reS21 imS21 reS12 imS12 reS22 imS22" in line:
            flag = True
        if "END" in line:
            flag = False
            # 输出该偏置的s2p
            save_s2p(new_lines, filein.replace("_multi_67G.s2p", "_vg_" + vg + "_vd_" + vd + "_67G.s2p"))
            new_lines = []

        if flag:
            new_lines.append(line)


def csv_files_to_s2p(filelist):
    '''
    此函数将labview测得的s参数（csv格式），转换成s2p文件
    :param filein:
    :return:
    '''
    for filein in filelist:

        if ".csv" in filein:
            with open(filein, 'r') as f_r:
                file_content = f_r.readlines()

            fileout = filein.replace(".csv", ".s2p")
            with open(fileout, 'w') as f_w:
                f_w.write("# Hz S DB R 50\n")
                for line in file_content:
                    if "fre" not in line:
                        f_w.write(line.replace(',', '\t'))


def get_all_files_in_directory(root_dir, filetype='.csv'):
    '''
    获取文件夹内所有子文件（递归），返回.csv格式文件
    :param root_dir:
    :return:
    '''
    all_files = []
    for root, dirs, files in os.walk(root_dir):
        for file in files:
            file_path = os.path.join(root, file)
            if ".csv" in file_path:
                all_files.append(file_path)
    return all_files


# def get_files_in_folder(folder_path):
#     files_name = os.listdir(folder_path)
#     for file in files_name:
#         if ".csv" in file:  # 仅针对csv后缀文件进行处理
#             csv_to_s2p(os.path.join(folder_path, file))
#             print(os.path.join(folder_path, file) + "is transfer to s2p")


def multis2p_to_s2p(folder_path):
    '''
    此函用于将iccap脚本语言输出的多偏置S参数，分裂成单个s2p文件
    :param folder_path:
    :return:
    '''
    files_name = os.listdir(folder_path)
    for file in files_name:
        if "_multi_" in file:  # 此处“_multi.s2p” 作为关键字
            mdf_to_s2p(os.path.join(folder_path, file))
            print(os.path.join(folder_path, file) + " is split")


def rename_files(folder_path, add_flag):
    # 获取文件夹内所有文件的列表
    file_list = get_all_files_in_directory(folder_path)

    # 遍历文件列表并重命名文件
    for old_filename in file_list:
        # 构建新的文件名，这里可以根据需要自定义重命名规则
        new_filename = old_filename.replace('.csv',  "_" + add_flag + '.csv')

        # 构建文件的完整路径
        old_filepath = old_filename
        new_filepath = new_filename

        # 使用os.rename()来重命名文件
        os.rename(old_filepath, new_filepath)


def rename_file(folder_path):

    dut_name = os.path.basename(folder_path)

    for filename in os.listdir(folder_path):
        file_path = os.path.join(folder_path, filename)
        # new_filename = dut_name + filename.replace('VG', "_vg_").replace('VD', '_vd_')
        new_filename = filename.replace('C15_', "DUT_")
        new_file_path = os.path.join(folder_path, new_filename)
        os.rename(file_path, new_file_path)


def modify_csv_data(folder_path, output_folder):
    for filename in os.listdir(folder_path):
        if filename.endswith('.csv') and "phase_modify" not in filename:
            file_path = os.path.join(folder_path, filename)
            df = pd.read_csv(file_path)
            df['S11P'] = df['S11P'] + 180
            df['S22P'] = df['S22P'] + 180
            output_path = os.path.join(output_folder, filename.replace(".csv", "_phase_modify.csv"))
            df.to_csv(output_path, index=False)


def read_67G_s2p_data(filein):
    data = []
    with open(filein, 'r') as file:
        content = file.readlines()
    flag = False
    for line in content:
        if "# Hz S DB R 50" in line:
            flag = True
            continue
        if flag and line != '':
            data.append(line)
    data = data[:300]
    return data


def read_up60G_s2p_data(filein):
    data = []
    with open(filein, 'r') as file:
        content = file.readlines()
    flag = False
    for line in content:
        if "# Hz S DB R 50" in line:
            flag = True
            continue
        if flag and line != '':
            data.append(line)
    data = data[1:]
    return data


def whether_file_exist(filename):
    if os.path.exists(filename):
        print(f"{filename} exists.")
    else:
        print(f"{filename} does not exist.")


def merge_each_freq_s2p(data_folder, dut_name):

    _67G_file_path = os.path.join(os.path.join(data_folder, "67G"), dut_name)
    _60_90G_file_path = os.path.join(os.path.join(data_folder, "60_90G"), dut_name)
    _90_140G_file_path = os.path.join(os.path.join(data_folder, "90_140G"), dut_name)
    _140_220G_file_path = os.path.join(os.path.join(data_folder, "140_220G"), dut_name)

    _merge_file_path = os.path.join(os.path.join(data_folder, "all_freq"), dut_name)
    if not os.path.exists(_merge_file_path):
        os.makedirs(_merge_file_path)

    for _67G_file in os.listdir(_67G_file_path):
        if "_multi_" not in _67G_file:
            vg, vd = extract_bias(_67G_file)
            _60_90_file = dut_name + "_vg_" + vg + "_vd_" + vd + "_60_90G_phase_modify.s2p"
            _90_140_file = dut_name + "_vg_" + vg + "_vd_" + vd + "_90_140G_phase_modify.s2p"
            _140_220_file = dut_name + "_vg_" + vg + "_vd_" + vd + "_140_220G_phase_modify.s2p"
            _allfreq_file = dut_name + "_vg_" + vg + "_vd_" + vd + "_allfreq.s2p"


            _67G_fullfile = os.path.join(_67G_file_path, _67G_file)
            _60_90G_fullfile = os.path.join(_60_90G_file_path, _60_90_file)
            _90_140G_fullfile = os.path.join(_90_140G_file_path, _90_140_file)
            _140_220G_fullfile = os.path.join(_140_220G_file_path, _140_220_file)

            _allfreq_fullfile = os.path.join(_merge_file_path, _allfreq_file)

            whether_file_exist(_67G_fullfile)
            _67G_data = read_67G_s2p_data(_67G_fullfile)

            whether_file_exist(_60_90G_fullfile)
            _60_90G_data = read_up60G_s2p_data(_60_90G_fullfile)

            whether_file_exist(_90_140G_fullfile)
            _90_140G_data = read_up60G_s2p_data(_90_140G_fullfile)

            whether_file_exist(_140_220G_fullfile)
            _140_220G_data = read_up60G_s2p_data(_140_220G_fullfile)

            with open(_allfreq_fullfile, 'w') as f_w:
                f_w.write("# Hz S DB R 50\n")
                for line in _67G_data:
                    f_w.write(line)
                for line in _60_90G_data:
                    f_w.write(line)
                for line in _90_140G_data:
                    f_w.write(line)
                for line in _140_220G_data:
                    f_w.write(line)

            print(_allfreq_fullfile + " is merged complete!")

    # print(_67G_file_path)


def main():

    # csv_folder = r"F:\008_measdata\0901\0901\140-220G\C15"
    # modify_csv_data(csv_folder, csv_folder)

    # csv_folder = r"F:\008_measdata\0901\0901"
    # csv_folder = r"F:\008_measdata\0901\0901\140-220G\C15"
    # all_csv_files = get_all_files_in_directory(csv_folder)
    # csv_files_to_s2p(all_csv_files)

    # multi_sp = r'F:\008_measdata\0901\0901\67G\C15'
    # multis2p_to_s2p(multi_sp)

    folder = r"F:\008_measdata\0901\0901\all_freq\C15 - 副本"
    # rename_files(folder, "140_220G")
    rename_file(folder)

    # data_folder = r"F:\008_measdata\0901\0901"
    # merge_each_freq_s2p(data_folder, "C15")


if __name__ == "__main__":
    main()
